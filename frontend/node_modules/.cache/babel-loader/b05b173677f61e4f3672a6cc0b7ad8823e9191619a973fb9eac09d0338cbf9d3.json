{"ast":null,"code":"var _jsxFileName = \"/Users/siddharthan/Desktop/GetMax/PDF-OCR/frontend/src/components/OCRUpload.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OCRUpload = ({\n  auth\n}) => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [reports, setReports] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000';\n  const api = axios.create({\n    baseURL: API_BASE\n  });\n  api.interceptors.request.use(config => {\n    if (auth !== null && auth !== void 0 && auth.token) config.headers.Authorization = `Bearer ${auth.token}`;\n    return config;\n  });\n  const handleFileChange = e => {\n    setFiles(Array.from(e.target.files || []));\n    setReports([]);\n  };\n  const handleUploadAll = async () => {\n    if (!files.length) return;\n    setLoading(true);\n    try {\n      const out = [];\n      for (const f of files) {\n        const formData = new FormData();\n        formData.append(\"file\", f);\n        const res = await api.post(\"/api/ocr\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        out.push({\n          filename: f.name,\n          ...res.data\n        });\n      }\n      setReports(out);\n    } catch (e) {\n      console.error(\"Upload failed\", e);\n      alert(\"Upload failed\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCC4 PDF OCR Extraction Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\",\n      multiple: true,\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUploadAll,\n      disabled: loading,\n      children: loading ? \"Extracting...\" : \"Upload & Extract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), reports.map((r, idx) => {\n      var _r$report, _r$report$columns;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"report\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: r.filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), (_r$report = r.report) !== null && _r$report !== void 0 && (_r$report$columns = _r$report.columns) !== null && _r$report$columns !== void 0 && _r$report$columns.length ? /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"excel-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: r.report.columns.map(c => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: c\n              }, c, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: r.report.rows.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: r.report.columns.map(c => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row[c]\n              }, c, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 23\n              }, this))\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No table detected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(OCRUpload, \"iLG3gK2UsFbfwGZCFcMg8DCNJZw=\");\n_c = OCRUpload;\nexport default OCRUpload;\nvar _c;\n$RefreshReg$(_c, \"OCRUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","OCRUpload","auth","_s","files","setFiles","reports","setReports","loading","setLoading","API_BASE","process","env","REACT_APP_API_BASE","api","create","baseURL","interceptors","request","use","config","token","headers","Authorization","handleFileChange","e","Array","from","target","handleUploadAll","length","out","f","formData","FormData","append","res","post","push","filename","name","data","console","error","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","multiple","onChange","onClick","disabled","map","r","idx","_r$report","_r$report$columns","report","columns","c","rows","row","i","_c","$RefreshReg$"],"sources":["/Users/siddharthan/Desktop/GetMax/PDF-OCR/frontend/src/components/OCRUpload.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport '../App.css';\n\nconst OCRUpload = ({ auth }) => {\n  const [files, setFiles] = useState([]);\n  const [reports, setReports] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000';\n  const api = axios.create({ baseURL: API_BASE });\n  api.interceptors.request.use((config) => {\n    if (auth?.token) config.headers.Authorization = `Bearer ${auth.token}`;\n    return config;\n  });\n\n  const handleFileChange = (e) => {\n    setFiles(Array.from(e.target.files || []));\n    setReports([]);\n  };\n\n  const handleUploadAll = async () => {\n    if (!files.length) return;\n    setLoading(true);\n    try {\n      const out = [];\n      for (const f of files) {\n        const formData = new FormData();\n        formData.append(\"file\", f);\n        const res = await api.post(\"/api/ocr\", formData, {\n          headers: { \"Content-Type\": \"multipart/form-data\" },\n        });\n        out.push({ filename: f.name, ...res.data });\n      }\n      setReports(out);\n    } catch (e) {\n      console.error(\"Upload failed\", e);\n      alert(\"Upload failed\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>ðŸ“„ PDF OCR Extraction Tool</h2>\n      <input type=\"file\" accept=\".pdf\" multiple onChange={handleFileChange} />\n      <button onClick={handleUploadAll} disabled={loading}>\n        {loading ? \"Extracting...\" : \"Upload & Extract\"}\n      </button>\n\n      {reports.map((r, idx) => (\n        <div key={idx} className=\"report\">\n          <h3>{r.filename}</h3>\n          {r.report?.columns?.length ? (\n            <table className=\"excel-table\">\n              <thead>\n                <tr>\n                  {r.report.columns.map((c) => (\n                    <th key={c}>{c}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {r.report.rows.map((row, i) => (\n                  <tr key={i}>\n                    {r.report.columns.map((c) => (\n                      <td key={c}>{row[c]}</td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          ) : (\n            <p>No table detected</p>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default OCRUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}