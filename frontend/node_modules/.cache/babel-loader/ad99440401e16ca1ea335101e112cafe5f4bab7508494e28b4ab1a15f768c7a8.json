{"ast":null,"code":"var _jsxFileName = \"/Users/siddharthan/Desktop/GetMax/PDF-OCR/frontend/src/components/OCRUpload.jsx\",\n  _s = $RefreshSig$();\n// OCRUpload.jsx (with Auto-Parse fallback)\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FIXED_HEADERS = [\"Patient Name\", \"Pat Ocr\", \"Responsible Party Name\", \"Rep #\", \"Doc\", \"B-Type\", \"Seen\", \"Service\", \"Type\", \"Office\", \"Code\", \"Description\", \"Amount\", \"Balance\", \"Claim\", \"Loc\", \"Entered\", \"Who\"];\n\n// ------------- Small helpers -------------\nconst isMoney = s => /\\d[\\d,]*\\.\\d{2}/.test(s || \"\");\nconst toMoneyTokens = s => (s || \"\").match(/\\d[\\d,]*\\.\\d{2}/g) || [];\nconst looksLikeName = s => /[A-Za-z]+,[A-Za-z]+/.test(s || \"\");\nconst looksLikeRepHash = s => /\\b\\d{6,}-\\d\\b/.test(s || \"\");\nconst looksLikeCPT = s => /\\b\\d{4,5}(?:-[A-Z0-9]{2})?\\b/.test(s || \"\"); // 00402-QZ, 19318-50, 67904-50, etc.\nconst looksLikeDate = s => /\\b\\d{2}[-/]\\d{2}[-/]\\d{2}\\b/.test(s || \"\");\nconst compact = a => a.filter(Boolean);\nconst joinParts = x => (Array.isArray(x) ? x.join(\" \") : String(x !== null && x !== void 0 ? x : \"\")).trim();\n\n// Auto parser: builds best-effort rows from raw OCR lines.\n// Strategy:\n// - Keep a \"patient context\" when we see Name and Rep# (and sometimes Pat Ocr/Responsible Party).\n// - When we hit a line with CPT-like codes, start a row; next human-text line becomes Description;\n//   next money line supplies Amount (and optionally Balance). Any trailing tokens we map to Claim/Loc/Entered/Who.\nfunction autoParseRows(rawTables, fieldArr) {\n  const rows = [];\n  if (!Array.isArray(rawTables) || rawTables.length === 0) return rows;\n  let ctx = {\n    patient: \"\",\n    patOcr: \"\",\n    respParty: \"\",\n    rep: \"\",\n    doc: \"\"\n  };\n\n  // Try to get doc/resp/other hints from fields (often blank in your file)\n  const getField = k => {\n    var _find;\n    return ((_find = (fieldArr || []).find(f => String(f.Field || \"\").toLowerCase() === k.toLowerCase())) === null || _find === void 0 ? void 0 : _find.Value) || \"\";\n  };\n\n  // Iterate raw lines\n  const lines = rawTables.map(joinParts);\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    // update patient context\n    if (looksLikeName(line)) {\n      ctx.patient = line;\n      // look ahead for rep#\n      for (let k = 1; k <= 3 && i + k < lines.length; k++) {\n        if (looksLikeRepHash(lines[i + k])) {\n          ctx.rep = lines[i + k].match(/\\b\\d{6,}-\\d\\b/)[0];\n          break;\n        }\n      }\n      continue;\n    }\n    if (looksLikeRepHash(line)) {\n      ctx.rep = line.match(/\\b\\d{6,}-\\d\\b/)[0];\n      continue;\n    }\n\n    // detect a procedure row start by CPT-like code presence\n    if (looksLikeCPT(line)) {\n      const row = Object.fromEntries(FIXED_HEADERS.map(h => [h, \"\"]));\n      row[\"Patient Name\"] = ctx.patient;\n      row[\"Pat Ocr\"] = ctx.patOcr;\n      row[\"Responsible Party Name\"] = ctx.respParty;\n      row[\"Rep #\"] = ctx.rep;\n      row[\"Doc\"] = ctx.doc;\n\n      // Pull codes from this and possibly the next line too (your sample often concatenates codes)\n      let codes = [];\n      let j = i;\n      while (j < lines.length && looksLikeCPT(lines[j])) {\n        const found = lines[j].match(/\\b\\d{4,5}(?:-[A-Z0-9]{2})?\\b/g) || [];\n        codes.push(...found);\n        j++;\n      }\n      row[\"Code\"] = compact(codes).join(\" \");\n\n      // Description: first non-empty, non-money, non-code line following\n      let descIdx = j;\n      while (descIdx < lines.length) {\n        const cand = lines[descIdx];\n        if (!looksLikeCPT(cand) && !isMoney(cand)) {\n          row[\"Description\"] = cand.replace(/\\*/g, \" \").replace(/\\s+/g, \" \").trim();\n          descIdx++;\n          break;\n        }\n        descIdx++;\n      }\n\n      // Amount/Balance: next line(s) with money tokens\n      let moneyIdx = descIdx;\n      let amountSet = false;\n      while (moneyIdx < lines.length) {\n        const m = toMoneyTokens(lines[moneyIdx]);\n        if (m.length) {\n          if (!amountSet) {\n            row[\"Amount\"] = m[0];\n            if (m.length > 1) row[\"Balance\"] = m[1];\n            amountSet = true;\n          } else if (!row[\"Balance\"] && m.length) {\n            row[\"Balance\"] = m[0];\n          }\n          moneyIdx++;\n          break;\n        }\n        // break early if we hit another header-like region\n        if (/^Charges:|^Date:|^FFCBilling/i.test(lines[moneyIdx])) break;\n        moneyIdx++;\n      }\n\n      // Claim/Loc/Entered/Who: very fuzzy; take next short tokens if present\n      let tail = compact([lines[moneyIdx], lines[moneyIdx + 1], lines[moneyIdx + 2]]).join(\" \").trim();\n      if (tail) {\n        const parts = tail.split(/\\s+/);\n        // try to map a few tokens if they look short-ish\n        if (!row[\"Claim\"] && parts[0] && parts[0].length <= 8 && !isMoney(parts[0])) {\n          row[\"Claim\"] = parts.shift();\n        }\n        if (!row[\"Loc\"] && parts[0] && parts[0].length <= 8 && !isMoney(parts[0])) {\n          row[\"Loc\"] = parts.shift();\n        }\n        if (!row[\"Entered\"] && parts[0] && (looksLikeDate(parts[0]) || parts[0].length <= 10)) {\n          row[\"Entered\"] = parts.shift();\n        }\n        if (!row[\"Who\"] && parts.length) {\n          row[\"Who\"] = parts.join(\" \");\n        }\n      }\n      rows.push(row);\n      // advance i close to moneyIdx to avoid duplicating\n      i = Math.max(i, moneyIdx - 1);\n    }\n  }\n\n  // Deduplicate obviously identical rows (same patient + code + amount)\n  const seen = new Set();\n  const unique = [];\n  for (const r of rows) {\n    const key = [r[\"Patient Name\"], r[\"Code\"], r[\"Amount\"], r[\"Description\"]].join(\"|\");\n    if (!seen.has(key)) {\n      seen.add(key);\n      unique.push(r);\n    }\n  }\n  return unique;\n}\nconst OCRUpload = ({\n  auth,\n  setAuth,\n  isAdmin = false\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [files, setFiles] = useState([]);\n  const [tables, setTables] = useState([]); // [{ columns, rows, raw }]\n  const [summaries, setSummaries] = useState([]); // [{ Charges, ... }]\n  const [loading, setLoading] = useState(false);\n  const [downloadReady, setDownloadReady] = useState(false);\n  const [useAutoParse, setUseAutoParse] = useState(true); // <-- toggle\n\n  const [isSignup, setIsSignup] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000';\n  const api = axios.create({\n    baseURL: API_BASE\n  });\n  api.interceptors.request.use(config => {\n    if (auth !== null && auth !== void 0 && auth.token) config.headers.Authorization = `Bearer ${auth.token}`;\n    return config;\n  });\n  api.interceptors.response.use(response => response, error => {\n    var _error$response;\n    if ([401, 403].includes((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status)) {\n      localStorage.clear();\n      setAuth(null);\n      alert('⚠️ Session expired or access denied. Please log in again.');\n    }\n    return Promise.reject(error);\n  });\n  useEffect(() => {\n    if (auth !== null && auth !== void 0 && auth.token && !isAdmin) navigate('/', {\n      replace: true\n    });\n  }, [auth, isAdmin, navigate]);\n\n  // -------- Auth (unchanged) --------\n  const handleSignup = async () => {\n    try {\n      const res = await api.post('/auth/signup', {\n        username,\n        password\n      });\n      setMessage(res.data.message || 'Signup successful!');\n      const loginRes = await api.post('/auth/login', {\n        username,\n        password\n      });\n      const {\n        token,\n        username: un,\n        role\n      } = loginRes.data;\n      setAuth({\n        token,\n        username: un,\n        role\n      });\n      localStorage.setItem('auth', JSON.stringify({\n        token,\n        username: un,\n        role\n      }));\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setMessage('Signup failed: ' + (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message));\n    }\n  };\n  const handleLogin = async () => {\n    try {\n      const res = await api.post('/auth/login', {\n        username,\n        password\n      });\n      if (res.data.token) {\n        const {\n          token,\n          username: un,\n          role\n        } = res.data;\n        setAuth({\n          token,\n          username: un,\n          role\n        });\n        localStorage.setItem('auth', JSON.stringify({\n          token,\n          username: un,\n          role\n        }));\n        setMessage('Login successful!');\n      } else setMessage('Invalid credentials');\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setMessage('Login failed: ' + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || err.message));\n    }\n  };\n\n  // -------- File Selection --------\n  const handleFileChange = e => {\n    const selected = Array.from(e.target.files || []);\n    if (selected.length > 10) {\n      alert('⚠️ You can upload up to 10 files only.');\n      return;\n    }\n    setFiles(selected);\n    setTables([]);\n    setSummaries([]);\n    setDownloadReady(false);\n  };\n\n  // -------- Upload & Parse --------\n  const handleUploadAll = async () => {\n    if (!files.length) return;\n    setLoading(true);\n    try {\n      const outTables = [];\n      const outSummaries = [];\n      for (const [idx, file] of files.entries()) {\n        var _res$data, _report$columns;\n        const formData = new FormData();\n        formData.append('file', file);\n        const res = await api.post('/api/ocr', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log('OCR response for', file.name, res.data);\n\n        // Your backend structure (from your console.log)\n        const md = ((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.metadata) || {};\n        const report = md.report || {};\n        const rawTables = Array.isArray(md.tables) ? md.tables : [];\n        const fieldArr = Array.isArray(md.fields) ? md.fields : [];\n\n        // rows: prefer backend rows, else beta auto-parse from raw\n        let rows = Array.isArray(report.rows) ? report.rows : [];\n        if ((!rows || rows.length === 0) && useAutoParse) {\n          rows = autoParseRows(rawTables, fieldArr);\n        }\n        const columns = (_report$columns = report.columns) !== null && _report$columns !== void 0 && _report$columns.length ? report.columns : FIXED_HEADERS;\n\n        // Summary build (fields → fallback to raw parse)\n        const wanted = [\"Charges\", \"Receipts\", \"Commissions\", \"Total Due Doctor\", \"Credits\", \"Debits\", \"Bal Fwd\", \"Fin Chg\", \"Direct Paymnt\", \"Assess\", \"Acct. Rec.\", \"Total Entries\", \"NOTE\"];\n        const summaryObj = {};\n        fieldArr.forEach(({\n          Field,\n          Value\n        }) => {\n          const hit = wanted.find(w => w.toLowerCase() === String(Field || \"\").toLowerCase());\n          if (hit) summaryObj[hit] = Value !== null && Value !== void 0 ? Value : \"\";\n        });\n        if (rawTables.length) {\n          const joined = rawTables.map(joinParts).join(\" \");\n          const grab = label => {\n            const m = new RegExp(`${label.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\s*:?\\\\s*([0-9,.-]+)`, \"i\").exec(joined);\n            return m ? m[1] : \"\";\n          };\n          wanted.forEach(k => {\n            if (!summaryObj[k] || summaryObj[k] === \"\") {\n              if (k === \"NOTE\") {\n                const m = /NOTE\\s*:?(.+?)(?:\\s{2,}|$)/i.exec(joined);\n                if (m) summaryObj[\"NOTE\"] = m[1].trim();\n              } else {\n                summaryObj[k] = grab(k) || \"\";\n              }\n            }\n          });\n        }\n        outTables[idx] = {\n          columns,\n          rows,\n          raw: rawTables\n        };\n        outSummaries[idx] = summaryObj;\n      }\n      setTables(outTables);\n      setSummaries(outSummaries);\n      setDownloadReady(true);\n    } catch (err) {\n      console.error('Upload failed:', err);\n      alert('⚠️ Upload failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // -------- Excel Export --------\n  const handleDownloadExcel = () => {\n    const wb = XLSX.utils.book_new();\n\n    // 1) Report rows per file\n    tables.forEach((t, i) => {\n      const data = (t.rows || []).map(r => {\n        const o = {};\n        (t.columns || FIXED_HEADERS).forEach(c => {\n          var _r$c;\n          o[c] = (_r$c = r === null || r === void 0 ? void 0 : r[c]) !== null && _r$c !== void 0 ? _r$c : \"\";\n        });\n        return o;\n      });\n      const ws = XLSX.utils.json_to_sheet(data.length ? data : [{\n        Note: \"No rows\"\n      }]);\n      XLSX.utils.book_append_sheet(wb, ws, `ReportRows_${i + 1}`);\n    });\n\n    // 2) Fields sheet\n    const fieldsRows = summaries.map((s, i) => {\n      var _files$i;\n      return {\n        File: ((_files$i = files[i]) === null || _files$i === void 0 ? void 0 : _files$i.name) || `File_${i + 1}`,\n        ...s\n      };\n    });\n    XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(fieldsRows.length ? fieldsRows : [{\n      Note: \"No summaries\"\n    }]), \"Fields\");\n\n    // 3) Raw text per file\n    tables.forEach((t, i) => {\n      const raw = (t.raw || []).map((line, idx) => ({\n        Line: idx + 1,\n        Text: joinParts(line)\n      }));\n      const ws = XLSX.utils.json_to_sheet(raw.length ? raw : [{\n        Note: \"No raw text\"\n      }]);\n      XLSX.utils.book_append_sheet(wb, ws, `RawText_${i + 1}`);\n    });\n    const wbout = XLSX.write(wb, {\n      type: 'array',\n      bookType: 'xlsx'\n    });\n    saveAs(new Blob([wbout], {\n      type: 'application/octet-stream'\n    }), 'ocr_export.xlsx');\n  };\n\n  // -------- Renderers --------\n  const ExcelGrid = ({\n    title,\n    columns,\n    rows,\n    summary,\n    wasParsed\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"excel-grid-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"excel-grid-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"file-title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), wasParsed && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"badge\",\n        children: \"auto-parsed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"excel-grid compact\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"excel-grid-scroll\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"excel-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: columns.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"excel-th\",\n                children: col\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [rows && rows.length > 0 ? rows.map((r, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: columns.map(col => {\n                var _r$col;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"excel-td\",\n                  children: (_r$col = r === null || r === void 0 ? void 0 : r[col]) !== null && _r$col !== void 0 ? _r$col : ''\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 23\n                }, this);\n              })\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: columns.length,\n                style: {\n                  textAlign: 'center'\n                },\n                children: \"No rows (showing Summary and Raw OCR below)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 17\n            }, this), summary && Object.keys(summary).length > 0 && /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"summary-row\",\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: columns.length,\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: [\"Charges: \", summary[\"Charges\"] || 0, \" | Receipts: \", summary[\"Receipts\"] || 0, \" | Credits: \", summary[\"Credits\"] || 0, \" | Debits: \", summary[\"Debits\"] || 0, \" | Balance Fwd: \", summary[\"Bal Fwd\"] || 0, \" | Acct. Rec.: \", summary[\"Acct. Rec.\"] || 0, \" | Total Entries: \", summary[\"Total Entries\"] || 0, summary[\"NOTE\"] ? ` | Note: ${summary[\"NOTE\"]}` : \"\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 5\n  }, this);\n  const SummaryCards = ({\n    summary\n  }) => {\n    const keys = [\"Charges\", \"Receipts\", \"Commissions\", \"Total Due Doctor\", \"Credits\", \"Debits\", \"Bal Fwd\", \"Fin Chg\", \"Direct Paymnt\", \"Assess\", \"Acct. Rec.\", \"Total Entries\", \"NOTE\"];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-2 md:grid-cols-3 gap-2 my-3\",\n      children: keys.map(k => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border border-white/15 rounded-lg p-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs opacity-70\",\n          children: k\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font-semibold\",\n          children: summary !== null && summary !== void 0 && summary[k] ? String(summary[k]) : \"—\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 13\n        }, this)]\n      }, k, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this);\n  };\n  const RawPanel = ({\n    lines\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-64 overflow-auto border border-white/15 rounded-xl p-3 text-xs leading-6 my-2\",\n    children: (lines !== null && lines !== void 0 && lines.length ? lines : [\"(no raw text)\"]).map((t, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whitespace-pre-wrap\",\n      children: [i + 1, \". \", joinParts(t)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 5\n  }, this);\n\n  // -------- Auth Gate --------\n  if (!(auth !== null && auth !== void 0 && auth.token) && !isAdmin) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: isSignup ? 'Signup' : 'Login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        className: \"auth-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        className: \"auth-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), isSignup ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"auth-btn\",\n        onClick: handleSignup,\n        children: \"Signup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"auth-btn\",\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toggle-btn\",\n        onClick: () => {\n          setIsSignup(!isSignup);\n          setMessage('');\n        },\n        children: isSignup ? 'Already have an account? Login' : 'No account? Signup'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"auth-message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this);\n  }\n\n  // -------- UI --------\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"main-heading\",\n        children: isAdmin ? '📂 Admin OCR Upload Tool' : '📄 File OCR Extraction Tool'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"upload-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"upload-label\",\n        children: \"Upload up to 10 files:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file-upload\",\n        accept: \".pdf,.jpg,.jpeg,.png,.doc,.docx\",\n        multiple: true,\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: handleUploadAll,\n          children: \"Upload All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 11\n        }, this), downloadReady && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"download-btn\",\n          onClick: handleDownloadExcel,\n          children: \"\\u2B07\\uFE0F Download Excel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            fontSize: 12\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: useAutoParse,\n            onChange: e => setUseAutoParse(e.target.checked),\n            style: {\n              marginRight: 6\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this), \"Try to auto-parse rows from raw OCR when backend rows are empty (beta)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"file-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"section-heading\",\n        children: \"\\uD83D\\uDCC1 Selected Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"file-list\",\n        children: files.map((file, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\uD83D\\uDCCE \", file.name]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 38\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-text\",\n      children: \"\\u23F3 Extracting table...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 19\n    }, this), tables.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"results-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"section-heading\",\n        children: \"\\uD83D\\uDCCA Procedure Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this), files.map((file, idx) => {\n        var _tables$idx, _tables$idx$rows, _tables$idx2, _tables$idx3, _tables$idx4;\n        const wasParsed = (((_tables$idx = tables[idx]) === null || _tables$idx === void 0 ? void 0 : (_tables$idx$rows = _tables$idx.rows) === null || _tables$idx$rows === void 0 ? void 0 : _tables$idx$rows.length) || 0) > 0 && rescueRowsNote();\n        function rescueRowsNote() {\n          return true;\n        } // just for a badge flag; harmless\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-10\",\n          children: [/*#__PURE__*/_jsxDEV(ExcelGrid, {\n            title: file.name,\n            columns: ((_tables$idx2 = tables[idx]) === null || _tables$idx2 === void 0 ? void 0 : _tables$idx2.columns) || FIXED_HEADERS,\n            rows: ((_tables$idx3 = tables[idx]) === null || _tables$idx3 === void 0 ? void 0 : _tables$idx3.rows) || [],\n            summary: summaries[idx] || {},\n            wasParsed: wasParsed\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"section-heading\",\n            style: {\n              marginTop: '12px'\n            },\n            children: \"\\uD83D\\uDCCC Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(SummaryCards, {\n            summary: summaries[idx] || {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"section-heading\",\n            style: {\n              marginTop: '12px'\n            },\n            children: \"\\uD83E\\uDDFE Raw OCR Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RawPanel, {\n            lines: ((_tables$idx4 = tables[idx]) === null || _tables$idx4 === void 0 ? void 0 : _tables$idx4.raw) || []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 17\n          }, this)]\n        }, `wrap-${idx}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 461,\n    columnNumber: 5\n  }, this);\n};\n_s(OCRUpload, \"1TO1xJBr5INQcg9jSQtzgwBMGi0=\", false, function () {\n  return [useNavigate];\n});\n_c = OCRUpload;\nexport default OCRUpload;\nvar _c;\n$RefreshReg$(_c, \"OCRUpload\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","useNavigate","XLSX","saveAs","jsxDEV","_jsxDEV","FIXED_HEADERS","isMoney","s","test","toMoneyTokens","match","looksLikeName","looksLikeRepHash","looksLikeCPT","looksLikeDate","compact","a","filter","Boolean","joinParts","x","Array","isArray","join","String","trim","autoParseRows","rawTables","fieldArr","rows","length","ctx","patient","patOcr","respParty","rep","doc","getField","k","_find","find","f","Field","toLowerCase","Value","lines","map","i","line","row","Object","fromEntries","h","codes","j","found","push","descIdx","cand","replace","moneyIdx","amountSet","m","tail","parts","split","shift","Math","max","seen","Set","unique","r","key","has","add","OCRUpload","auth","setAuth","isAdmin","_s","navigate","files","setFiles","tables","setTables","summaries","setSummaries","loading","setLoading","downloadReady","setDownloadReady","useAutoParse","setUseAutoParse","isSignup","setIsSignup","username","setUsername","password","setPassword","message","setMessage","API_BASE","process","env","REACT_APP_API_BASE","api","create","baseURL","interceptors","request","use","config","token","headers","Authorization","response","error","_error$response","includes","status","localStorage","clear","alert","Promise","reject","handleSignup","res","post","data","loginRes","un","role","setItem","JSON","stringify","err","_err$response","_err$response$data","handleLogin","_err$response2","_err$response2$data","handleFileChange","e","selected","from","target","handleUploadAll","outTables","outSummaries","idx","file","entries","_res$data","_report$columns","formData","FormData","append","console","log","name","md","metadata","report","fields","columns","wanted","summaryObj","forEach","hit","w","joined","grab","label","RegExp","exec","raw","handleDownloadExcel","wb","utils","book_new","t","o","c","_r$c","ws","json_to_sheet","Note","book_append_sheet","fieldsRows","_files$i","File","Line","Text","wbout","write","type","bookType","Blob","ExcelGrid","title","summary","wasParsed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","col","_r$col","colSpan","style","textAlign","keys","fontWeight","SummaryCards","RawPanel","placeholder","value","onChange","onClick","htmlFor","id","accept","multiple","fontSize","checked","marginRight","_tables$idx","_tables$idx$rows","_tables$idx2","_tables$idx3","_tables$idx4","rescueRowsNote","marginTop","_c","$RefreshReg$"],"sources":["/Users/siddharthan/Desktop/GetMax/PDF-OCR/frontend/src/components/OCRUpload.jsx"],"sourcesContent":["// OCRUpload.jsx (with Auto-Parse fallback)\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport '../App.css';\n\nconst FIXED_HEADERS = [\n  \"Patient Name\",\"Pat Ocr\",\"Responsible Party Name\",\"Rep #\",\"Doc\",\n  \"B-Type\",\"Seen\",\"Service\",\"Type\",\"Office\",\"Code\",\"Description\",\n  \"Amount\",\"Balance\",\"Claim\",\"Loc\",\"Entered\",\"Who\"\n];\n\n// ------------- Small helpers -------------\nconst isMoney = (s) => /\\d[\\d,]*\\.\\d{2}/.test(s || \"\");\nconst toMoneyTokens = (s) =>\n  (s || \"\").match(/\\d[\\d,]*\\.\\d{2}/g) || [];\n\nconst looksLikeName = (s) => /[A-Za-z]+,[A-Za-z]+/.test(s || \"\");\nconst looksLikeRepHash = (s) => /\\b\\d{6,}-\\d\\b/.test(s || \"\");\nconst looksLikeCPT = (s) => /\\b\\d{4,5}(?:-[A-Z0-9]{2})?\\b/.test(s || \"\"); // 00402-QZ, 19318-50, 67904-50, etc.\nconst looksLikeDate = (s) => /\\b\\d{2}[-/]\\d{2}[-/]\\d{2}\\b/.test(s || \"\");\nconst compact = (a) => a.filter(Boolean);\n\nconst joinParts = (x) => (Array.isArray(x) ? x.join(\" \") : String(x ?? \"\")).trim();\n\n// Auto parser: builds best-effort rows from raw OCR lines.\n// Strategy:\n// - Keep a \"patient context\" when we see Name and Rep# (and sometimes Pat Ocr/Responsible Party).\n// - When we hit a line with CPT-like codes, start a row; next human-text line becomes Description;\n//   next money line supplies Amount (and optionally Balance). Any trailing tokens we map to Claim/Loc/Entered/Who.\nfunction autoParseRows(rawTables, fieldArr) {\n  const rows = [];\n  if (!Array.isArray(rawTables) || rawTables.length === 0) return rows;\n\n  let ctx = {\n    patient: \"\",\n    patOcr: \"\",\n    respParty: \"\",\n    rep: \"\",\n    doc: \"\"\n  };\n\n  // Try to get doc/resp/other hints from fields (often blank in your file)\n  const getField = (k) =>\n    (fieldArr || []).find(f => String(f.Field || \"\").toLowerCase() === k.toLowerCase())?.Value || \"\";\n\n  // Iterate raw lines\n  const lines = rawTables.map(joinParts);\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    // update patient context\n    if (looksLikeName(line)) {\n      ctx.patient = line;\n      // look ahead for rep#\n      for (let k = 1; k <= 3 && i + k < lines.length; k++) {\n        if (looksLikeRepHash(lines[i + k])) {\n          ctx.rep = lines[i + k].match(/\\b\\d{6,}-\\d\\b/)[0];\n          break;\n        }\n      }\n      continue;\n    }\n    if (looksLikeRepHash(line)) {\n      ctx.rep = line.match(/\\b\\d{6,}-\\d\\b/)[0];\n      continue;\n    }\n\n    // detect a procedure row start by CPT-like code presence\n    if (looksLikeCPT(line)) {\n      const row = Object.fromEntries(FIXED_HEADERS.map(h => [h, \"\"]));\n      row[\"Patient Name\"] = ctx.patient;\n      row[\"Pat Ocr\"] = ctx.patOcr;\n      row[\"Responsible Party Name\"] = ctx.respParty;\n      row[\"Rep #\"] = ctx.rep;\n      row[\"Doc\"] = ctx.doc;\n\n      // Pull codes from this and possibly the next line too (your sample often concatenates codes)\n      let codes = [];\n      let j = i;\n      while (j < lines.length && looksLikeCPT(lines[j])) {\n        const found = lines[j].match(/\\b\\d{4,5}(?:-[A-Z0-9]{2})?\\b/g) || [];\n        codes.push(...found);\n        j++;\n      }\n      row[\"Code\"] = compact(codes).join(\" \");\n\n      // Description: first non-empty, non-money, non-code line following\n      let descIdx = j;\n      while (descIdx < lines.length) {\n        const cand = lines[descIdx];\n        if (!looksLikeCPT(cand) && !isMoney(cand)) {\n          row[\"Description\"] = cand.replace(/\\*/g, \" \").replace(/\\s+/g, \" \").trim();\n          descIdx++;\n          break;\n        }\n        descIdx++;\n      }\n\n      // Amount/Balance: next line(s) with money tokens\n      let moneyIdx = descIdx;\n      let amountSet = false;\n      while (moneyIdx < lines.length) {\n        const m = toMoneyTokens(lines[moneyIdx]);\n        if (m.length) {\n          if (!amountSet) {\n            row[\"Amount\"] = m[0];\n            if (m.length > 1) row[\"Balance\"] = m[1];\n            amountSet = true;\n          } else if (!row[\"Balance\"] && m.length) {\n            row[\"Balance\"] = m[0];\n          }\n          moneyIdx++;\n          break;\n        }\n        // break early if we hit another header-like region\n        if (/^Charges:|^Date:|^FFCBilling/i.test(lines[moneyIdx])) break;\n        moneyIdx++;\n      }\n\n      // Claim/Loc/Entered/Who: very fuzzy; take next short tokens if present\n      let tail = compact([\n        lines[moneyIdx],\n        lines[moneyIdx + 1],\n        lines[moneyIdx + 2],\n      ])\n        .join(\" \")\n        .trim();\n\n      if (tail) {\n        const parts = tail.split(/\\s+/);\n        // try to map a few tokens if they look short-ish\n        if (!row[\"Claim\"] && parts[0] && parts[0].length <= 8 && !isMoney(parts[0])) {\n          row[\"Claim\"] = parts.shift();\n        }\n        if (!row[\"Loc\"] && parts[0] && parts[0].length <= 8 && !isMoney(parts[0])) {\n          row[\"Loc\"] = parts.shift();\n        }\n        if (!row[\"Entered\"] && parts[0] && (looksLikeDate(parts[0]) || parts[0].length <= 10)) {\n          row[\"Entered\"] = parts.shift();\n        }\n        if (!row[\"Who\"] && parts.length) {\n          row[\"Who\"] = parts.join(\" \");\n        }\n      }\n\n      rows.push(row);\n      // advance i close to moneyIdx to avoid duplicating\n      i = Math.max(i, moneyIdx - 1);\n    }\n  }\n\n  // Deduplicate obviously identical rows (same patient + code + amount)\n  const seen = new Set();\n  const unique = [];\n  for (const r of rows) {\n    const key = [r[\"Patient Name\"], r[\"Code\"], r[\"Amount\"], r[\"Description\"]].join(\"|\");\n    if (!seen.has(key)) {\n      seen.add(key);\n      unique.push(r);\n    }\n  }\n  return unique;\n}\n\nconst OCRUpload = ({ auth, setAuth, isAdmin = false }) => {\n  const navigate = useNavigate();\n  const [files, setFiles] = useState([]);\n  const [tables, setTables] = useState([]);       // [{ columns, rows, raw }]\n  const [summaries, setSummaries] = useState([]); // [{ Charges, ... }]\n  const [loading, setLoading] = useState(false);\n  const [downloadReady, setDownloadReady] = useState(false);\n  const [useAutoParse, setUseAutoParse] = useState(true); // <-- toggle\n\n  const [isSignup, setIsSignup] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n\n  const API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000';\n  const api = axios.create({ baseURL: API_BASE });\n\n  api.interceptors.request.use((config) => {\n    if (auth?.token) config.headers.Authorization = `Bearer ${auth.token}`;\n    return config;\n  });\n\n  api.interceptors.response.use(\n    (response) => response,\n    (error) => {\n      if ([401, 403].includes(error.response?.status)) {\n        localStorage.clear();\n        setAuth(null);\n        alert('⚠️ Session expired or access denied. Please log in again.');\n      }\n      return Promise.reject(error);\n    }\n  );\n\n  useEffect(() => {\n    if (auth?.token && !isAdmin) navigate('/', { replace: true });\n  }, [auth, isAdmin, navigate]);\n\n  // -------- Auth (unchanged) --------\n  const handleSignup = async () => {\n    try {\n      const res = await api.post('/auth/signup', { username, password });\n      setMessage(res.data.message || 'Signup successful!');\n      const loginRes = await api.post('/auth/login', { username, password });\n      const { token, username: un, role } = loginRes.data;\n      setAuth({ token, username: un, role });\n      localStorage.setItem('auth', JSON.stringify({ token, username: un, role }));\n    } catch (err) {\n      setMessage('Signup failed: ' + (err.response?.data?.error || err.message));\n    }\n  };\n\n  const handleLogin = async () => {\n    try {\n      const res = await api.post('/auth/login', { username, password });\n      if (res.data.token) {\n        const { token, username: un, role } = res.data;\n        setAuth({ token, username: un, role });\n        localStorage.setItem('auth', JSON.stringify({ token, username: un, role }));\n        setMessage('Login successful!');\n      } else setMessage('Invalid credentials');\n    } catch (err) {\n      setMessage('Login failed: ' + (err.response?.data?.error || err.message));\n    }\n  };\n\n  // -------- File Selection --------\n  const handleFileChange = (e) => {\n    const selected = Array.from(e.target.files || []);\n    if (selected.length > 10) {\n      alert('⚠️ You can upload up to 10 files only.');\n      return;\n    }\n    setFiles(selected);\n    setTables([]);\n    setSummaries([]);\n    setDownloadReady(false);\n  };\n\n  // -------- Upload & Parse --------\n  const handleUploadAll = async () => {\n    if (!files.length) return;\n    setLoading(true);\n\n    try {\n      const outTables = [];\n      const outSummaries = [];\n\n      for (const [idx, file] of files.entries()) {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        const res = await api.post('/api/ocr', formData, {\n          headers: { 'Content-Type': 'multipart/form-data' },\n        });\n\n        console.log('OCR response for', file.name, res.data);\n\n        // Your backend structure (from your console.log)\n        const md = res.data?.metadata || {};\n        const report = md.report || {};\n        const rawTables = Array.isArray(md.tables) ? md.tables : [];\n        const fieldArr = Array.isArray(md.fields) ? md.fields : [];\n\n        // rows: prefer backend rows, else beta auto-parse from raw\n        let rows = Array.isArray(report.rows) ? report.rows : [];\n        if ((!rows || rows.length === 0) && useAutoParse) {\n          rows = autoParseRows(rawTables, fieldArr);\n        }\n\n        const columns = report.columns?.length ? report.columns : FIXED_HEADERS;\n\n        // Summary build (fields → fallback to raw parse)\n        const wanted = [\n          \"Charges\",\"Receipts\",\"Commissions\",\"Total Due Doctor\",\"Credits\",\"Debits\",\n          \"Bal Fwd\",\"Fin Chg\",\"Direct Paymnt\",\"Assess\",\"Acct. Rec.\",\"Total Entries\",\"NOTE\"\n        ];\n        const summaryObj = {};\n        fieldArr.forEach(({ Field, Value }) => {\n          const hit = wanted.find(w => w.toLowerCase() === String(Field || \"\").toLowerCase());\n          if (hit) summaryObj[hit] = Value ?? \"\";\n        });\n        if (rawTables.length) {\n          const joined = rawTables.map(joinParts).join(\" \");\n          const grab = (label) => {\n            const m = new RegExp(`${label.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\s*:?\\\\s*([0-9,.-]+)`, \"i\").exec(joined);\n            return m ? m[1] : \"\";\n          };\n          wanted.forEach(k => {\n            if (!summaryObj[k] || summaryObj[k] === \"\") {\n              if (k === \"NOTE\") {\n                const m = /NOTE\\s*:?(.+?)(?:\\s{2,}|$)/i.exec(joined);\n                if (m) summaryObj[\"NOTE\"] = m[1].trim();\n              } else {\n                summaryObj[k] = grab(k) || \"\";\n              }\n            }\n          });\n        }\n\n        outTables[idx] = { columns, rows, raw: rawTables };\n        outSummaries[idx] = summaryObj;\n      }\n\n      setTables(outTables);\n      setSummaries(outSummaries);\n      setDownloadReady(true);\n    } catch (err) {\n      console.error('Upload failed:', err);\n      alert('⚠️ Upload failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // -------- Excel Export --------\n  const handleDownloadExcel = () => {\n    const wb = XLSX.utils.book_new();\n\n    // 1) Report rows per file\n    tables.forEach((t, i) => {\n      const data = (t.rows || []).map(r => {\n        const o = {};\n        (t.columns || FIXED_HEADERS).forEach(c => { o[c] = r?.[c] ?? \"\"; });\n        return o;\n      });\n      const ws = XLSX.utils.json_to_sheet(data.length ? data : [{ Note: \"No rows\" }]);\n      XLSX.utils.book_append_sheet(wb, ws, `ReportRows_${i + 1}`);\n    });\n\n    // 2) Fields sheet\n    const fieldsRows = summaries.map((s, i) => ({ File: files[i]?.name || `File_${i + 1}`, ...s }));\n    XLSX.utils.book_append_sheet(\n      wb,\n      XLSX.utils.json_to_sheet(fieldsRows.length ? fieldsRows : [{ Note: \"No summaries\" }]),\n      \"Fields\"\n    );\n\n    // 3) Raw text per file\n    tables.forEach((t, i) => {\n      const raw = (t.raw || []).map((line, idx) => ({\n        Line: idx + 1,\n        Text: joinParts(line)\n      }));\n      const ws = XLSX.utils.json_to_sheet(raw.length ? raw : [{ Note: \"No raw text\" }]);\n      XLSX.utils.book_append_sheet(wb, ws, `RawText_${i + 1}`);\n    });\n\n    const wbout = XLSX.write(wb, { type: 'array', bookType: 'xlsx' });\n    saveAs(new Blob([wbout], { type: 'application/octet-stream' }), 'ocr_export.xlsx');\n  };\n\n  // -------- Renderers --------\n  const ExcelGrid = ({ title, columns, rows, summary, wasParsed }) => (\n    <div className=\"excel-grid-wrapper\">\n      <div className=\"excel-grid-header\">\n        <h4 className=\"file-title\">{title}</h4>\n        {wasParsed && <span className=\"badge\">auto-parsed</span>}\n      </div>\n      <div className=\"excel-grid compact\">\n        <div className=\"excel-grid-scroll\">\n          <table className=\"excel-table\">\n            <thead>\n              <tr>\n                {columns.map((col) => (\n                  <th key={col} className=\"excel-th\">{col}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {rows && rows.length > 0 ? (\n                rows.map((r, i) => (\n                  <tr key={i}>\n                    {columns.map((col) => (\n                      <td key={col} className=\"excel-td\">{r?.[col] ?? ''}</td>\n                    ))}\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td colSpan={columns.length} style={{ textAlign: 'center' }}>\n                    No rows (showing Summary and Raw OCR below)\n                  </td>\n                </tr>\n              )}\n              {summary && Object.keys(summary).length > 0 && (\n                <tr className=\"summary-row\">\n                  <td colSpan={columns.length} style={{ fontWeight: 'bold' }}>\n                    Charges: {summary[\"Charges\"] || 0} | Receipts: {summary[\"Receipts\"] || 0} | \n                    Credits: {summary[\"Credits\"] || 0} | Debits: {summary[\"Debits\"] || 0} | \n                    Balance Fwd: {summary[\"Bal Fwd\"] || 0} | Acct. Rec.: {summary[\"Acct. Rec.\"] || 0} | \n                    Total Entries: {summary[\"Total Entries\"] || 0}\n                    {summary[\"NOTE\"] ? ` | Note: ${summary[\"NOTE\"]}` : \"\"}\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n\n  const SummaryCards = ({ summary }) => {\n    const keys = [\n      \"Charges\",\"Receipts\",\"Commissions\",\"Total Due Doctor\",\"Credits\",\"Debits\",\n      \"Bal Fwd\",\"Fin Chg\",\"Direct Paymnt\",\"Assess\",\"Acct. Rec.\",\"Total Entries\",\"NOTE\"\n    ];\n    return (\n      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 my-3\">\n        {keys.map(k => (\n          <div key={k} className=\"border border-white/15 rounded-lg p-2\">\n            <div className=\"text-xs opacity-70\">{k}</div>\n            <div className=\"font-semibold\">{summary?.[k] ? String(summary[k]) : \"—\"}</div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const RawPanel = ({ lines }) => (\n    <div className=\"h-64 overflow-auto border border-white/15 rounded-xl p-3 text-xs leading-6 my-2\">\n      {(lines?.length ? lines : [\"(no raw text)\"]).map((t, i) => (\n        <div key={i} className=\"whitespace-pre-wrap\">\n          {i + 1}. {joinParts(t)}\n        </div>\n      ))}\n    </div>\n  );\n\n  // -------- Auth Gate --------\n  if (!auth?.token && !isAdmin) {\n    return (\n      <div className=\"container\">\n        <h2>{isSignup ? 'Signup' : 'Login'}</h2>\n        <input type=\"text\" placeholder=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"auth-input\" />\n        <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"auth-input\" />\n        {isSignup ? (\n          <button className=\"auth-btn\" onClick={handleSignup}>Signup</button>\n        ) : (\n          <button className=\"auth-btn\" onClick={handleLogin}>Login</button>\n        )}\n        <button className=\"toggle-btn\" onClick={() => { setIsSignup(!isSignup); setMessage(''); }}>\n          {isSignup ? 'Already have an account? Login' : 'No account? Signup'}\n        </button>\n        {message && <p className=\"auth-message\">{message}</p>}\n      </div>\n    );\n  }\n\n  // -------- UI --------\n  return (\n    <div className=\"container\">\n      <header>\n        <h2 className=\"main-heading\">\n          {isAdmin ? '📂 Admin OCR Upload Tool' : '📄 File OCR Extraction Tool'}\n        </h2>\n      </header>\n\n      <section className=\"upload-section\">\n        <label htmlFor=\"file-upload\" className=\"upload-label\">Upload up to 10 files:</label>\n        <input type=\"file\" id=\"file-upload\" accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\" multiple onChange={handleFileChange} />\n        <div className=\"button-row\">\n          <button className=\"upload-btn\" onClick={handleUploadAll}>Upload All</button>\n          {downloadReady && (\n            <button className=\"download-btn\" onClick={handleDownloadExcel}>\n              ⬇️ Download Excel\n            </button>\n          )}\n        </div>\n        <div className=\"mt-2\">\n          <label style={{ fontSize: 12 }}>\n            <input\n              type=\"checkbox\"\n              checked={useAutoParse}\n              onChange={(e) => setUseAutoParse(e.target.checked)}\n              style={{ marginRight: 6 }}\n            />\n            Try to auto-parse rows from raw OCR when backend rows are empty (beta)\n          </label>\n        </div>\n      </section>\n\n      {files.length > 0 && (\n        <section className=\"file-preview\">\n          <h3 className=\"section-heading\">📁 Selected Files</h3>\n          <ul className=\"file-list\">\n            {files.map((file, i) => (<li key={i}>📎 {file.name}</li>))}\n          </ul>\n        </section>\n      )}\n\n      {loading && <p className=\"loading-text\">⏳ Extracting table...</p>}\n\n      {tables.length > 0 && (\n        <section className=\"results-section\">\n          <h3 className=\"section-heading\">📊 Procedure Report</h3>\n\n          {files.map((file, idx) => {\n            const wasParsed = (tables[idx]?.rows?.length || 0) > 0 && (rescueRowsNote());\n            function rescueRowsNote(){ return true; } // just for a badge flag; harmless\n            return (\n              <div key={`wrap-${idx}`} className=\"mb-10\">\n                <ExcelGrid\n                  title={file.name}\n                  columns={tables[idx]?.columns || FIXED_HEADERS}\n                  rows={tables[idx]?.rows || []}\n                  summary={summaries[idx] || {}}\n                  wasParsed={wasParsed}\n                />\n\n                <h4 className=\"section-heading\" style={{ marginTop: '12px' }}>📌 Summary</h4>\n                <SummaryCards summary={summaries[idx] || {}} />\n\n                <h4 className=\"section-heading\" style={{ marginTop: '12px' }}>🧾 Raw OCR Lines</h4>\n                <RawPanel lines={tables[idx]?.raw || []} />\n              </div>\n            );\n          })}\n        </section>\n      )}\n    </div>\n  );\n};\n\nexport default OCRUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}