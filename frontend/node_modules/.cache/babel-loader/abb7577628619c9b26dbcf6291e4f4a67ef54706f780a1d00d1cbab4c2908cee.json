{"ast":null,"code":"var _jsxFileName = \"/Users/siddharthan/Desktop/PDF-OCR/frontend/src/components/OCRUpload.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport MetadataTable from './MetadataTable';\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OCRUpload = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [metadata, setMetadata] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [downloadReady, setDownloadReady] = useState(false);\n  const apiUrl = process.env.REACT_APP_API_URL;\n  const handleFileChange = e => {\n    const selected = e.target.files[0];\n    if (selected && selected.type === \"application/pdf\") {\n      setFile(selected);\n      setMetadata({});\n      setDownloadReady(false);\n      setError(\"\");\n    } else {\n      setError(\"Please select a valid PDF file.\");\n      setFile(null);\n    }\n  };\n  const handleUpload = async () => {\n    if (!file) return;\n    const formData = new FormData();\n    formData.append('file', file);\n    setLoading(true);\n    setError(\"\");\n    try {\n      const res = await axios.post(`${apiUrl}/api/ocr`, formData);\n      const extracted = res.data.metadata || {};\n      setMetadata(extracted);\n      setDownloadReady(Object.keys(extracted).length > 0);\n    } catch (err) {\n      setError(\"OCR failed. Please check the backend logs.\");\n      console.error(\"OCR failed\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDownloadExcel = () => {\n    try {\n      const flattenObject = (obj, parentKey = '') => {\n        return Object.entries(obj).reduce((acc, [key, value]) => {\n          const fullKey = parentKey ? `${parentKey}.${key}` : key;\n          if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n            Object.assign(acc, flattenObject(value, fullKey));\n          } else if (Array.isArray(value)) {\n            acc[fullKey] = value.map(item => typeof item === 'object' ? JSON.stringify(item) : item).join('; ');\n          } else {\n            acc[fullKey] = value;\n          }\n          return acc;\n        }, {});\n      };\n      const flatMetadata = flattenObject(metadata);\n      const worksheetData = Object.entries(flatMetadata).map(([key, value]) => ({\n        Field: key,\n        Value: value\n      }));\n      const worksheet = XLSX.utils.json_to_sheet(worksheetData);\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, \"Metadata\");\n      const excelBuffer = XLSX.write(workbook, {\n        bookType: \"xlsx\",\n        type: \"array\"\n      });\n      const blob = new Blob([excelBuffer], {\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\"\n      });\n      saveAs(blob, \"metadata_output.xlsx\");\n    } catch (err) {\n      setError(\"Failed to download Excel.\");\n      console.error(\"Excel download error:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"2rem\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCC4 PDF OCR Extraction Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: !file || loading,\n      style: {\n        marginLeft: \"1rem\"\n      },\n      children: loading ? \"Processing...\" : \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"1rem\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this), !loading && Object.keys(metadata).length > 0 && /*#__PURE__*/_jsxDEV(MetadataTable, {\n      metadata: metadata\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), downloadReady && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDownloadExcel,\n      style: {\n        marginTop: \"1.5rem\"\n      },\n      children: \"\\uD83D\\uDCE5 Download Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(OCRUpload, \"v9AvwsFCTI2B1JEHUK3eTKL8IQg=\");\n_c = OCRUpload;\nexport default OCRUpload;\nvar _c;\n$RefreshReg$(_c, \"OCRUpload\");","map":{"version":3,"names":["React","useState","axios","MetadataTable","XLSX","saveAs","jsxDEV","_jsxDEV","OCRUpload","_s","file","setFile","metadata","setMetadata","loading","setLoading","error","setError","downloadReady","setDownloadReady","apiUrl","process","env","REACT_APP_API_URL","handleFileChange","e","selected","target","files","type","handleUpload","formData","FormData","append","res","post","extracted","data","Object","keys","length","err","console","handleDownloadExcel","flattenObject","obj","parentKey","entries","reduce","acc","key","value","fullKey","Array","isArray","assign","map","item","JSON","stringify","join","flatMetadata","worksheetData","Field","Value","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","write","bookType","blob","Blob","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","disabled","marginLeft","color","marginTop","_c","$RefreshReg$"],"sources":["/Users/siddharthan/Desktop/PDF-OCR/frontend/src/components/OCRUpload.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport MetadataTable from './MetadataTable';\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\n\nconst OCRUpload = () => {\n  const [file, setFile] = useState(null);\n  const [metadata, setMetadata] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [downloadReady, setDownloadReady] = useState(false);\n\n  const apiUrl = process.env.REACT_APP_API_URL;\n\n  const handleFileChange = (e) => {\n    const selected = e.target.files[0];\n    if (selected && selected.type === \"application/pdf\") {\n      setFile(selected);\n      setMetadata({});\n      setDownloadReady(false);\n      setError(\"\");\n    } else {\n      setError(\"Please select a valid PDF file.\");\n      setFile(null);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    setLoading(true);\n    setError(\"\");\n    try {\n      const res = await axios.post(`${apiUrl}/api/ocr`, formData);\n      const extracted = res.data.metadata || {};\n      setMetadata(extracted);\n      setDownloadReady(Object.keys(extracted).length > 0);\n    } catch (err) {\n      setError(\"OCR failed. Please check the backend logs.\");\n      console.error(\"OCR failed\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDownloadExcel = () => {\n    try {\n      const flattenObject = (obj, parentKey = '') => {\n        return Object.entries(obj).reduce((acc, [key, value]) => {\n          const fullKey = parentKey ? `${parentKey}.${key}` : key;\n          if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n            Object.assign(acc, flattenObject(value, fullKey));\n          } else if (Array.isArray(value)) {\n            acc[fullKey] = value.map((item) =>\n              typeof item === 'object' ? JSON.stringify(item) : item\n            ).join('; ');\n          } else {\n            acc[fullKey] = value;\n          }\n          return acc;\n        }, {});\n      };\n\n      const flatMetadata = flattenObject(metadata);\n      const worksheetData = Object.entries(flatMetadata).map(([key, value]) => ({\n        Field: key,\n        Value: value,\n      }));\n\n      const worksheet = XLSX.utils.json_to_sheet(worksheetData);\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, \"Metadata\");\n\n      const excelBuffer = XLSX.write(workbook, {\n        bookType: \"xlsx\",\n        type: \"array\",\n      });\n\n      const blob = new Blob([excelBuffer], {\n        type:\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\",\n      });\n\n      saveAs(blob, \"metadata_output.xlsx\");\n    } catch (err) {\n      setError(\"Failed to download Excel.\");\n      console.error(\"Excel download error:\", err);\n    }\n  };\n\n  return (\n    <div style={{ padding: \"2rem\", fontFamily: \"Arial, sans-serif\" }}>\n      <h2>ðŸ“„ PDF OCR Extraction Tool</h2>\n      <input type=\"file\" accept=\".pdf\" onChange={handleFileChange} />\n      <button onClick={handleUpload} disabled={!file || loading} style={{ marginLeft: \"1rem\" }}>\n        {loading ? \"Processing...\" : \"Upload\"}\n      </button>\n\n      {error && <p style={{ color: \"red\", marginTop: \"1rem\" }}>{error}</p>}\n\n      {!loading && Object.keys(metadata).length > 0 && (\n        <MetadataTable metadata={metadata} />\n      )}\n\n      {downloadReady && (\n        <button onClick={handleDownloadExcel} style={{ marginTop: \"1.5rem\" }}>\n          ðŸ“¥ Download Excel\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default OCRUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}