{"ast":null,"code":"var _jsxFileName = \"/Users/siddharthan/Desktop/PDF-OCR/frontend/src/components/OCRUpload.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport MetadataTable from './MetadataTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OCRUpload = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [metadata, setMetadata] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [downloadReady, setDownloadReady] = useState(false);\n  const handleFileChange = e => {\n    const selected = e.target.files[0];\n    if (selected && selected.type === \"application/pdf\") {\n      setFile(selected);\n      setMetadata({});\n      setDownloadReady(false);\n      setError(\"\");\n    } else {\n      setError(\"Please select a valid PDF file.\");\n      setFile(null);\n    }\n  };\n  const handleUpload = async () => {\n    if (!file) return;\n    const formData = new FormData();\n    formData.append('file', file);\n    setLoading(true);\n    setError(\"\");\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/ocr\", formData);\n      const extracted = res.data.metadata || {};\n      delete extracted[\"__validations__\"]; // optional: remove before render\n      setMetadata(extracted);\n      setDownloadReady(Object.keys(extracted).length > 0);\n    } catch (err) {\n      setError(\"OCR failed. Please check the backend logs.\");\n      console.error(\"OCR failed\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDownloadPDF = async () => {\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/export-pdf\", {\n        metadata\n      }, {\n        responseType: \"blob\"\n      });\n      const url = URL.createObjectURL(new Blob([res.data]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", \"metadata_output.pdf\");\n      document.body.appendChild(link);\n      link.click();\n    } catch (err) {\n      setError(\"Failed to download PDF.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"2rem\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCC4 PDF OCR Extraction Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: !file || loading,\n      style: {\n        marginLeft: \"1rem\"\n      },\n      children: loading ? \"Processing...\" : \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"1rem\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), !loading && Object.keys(metadata).length > 0 && /*#__PURE__*/_jsxDEV(MetadataTable, {\n      metadata: metadata\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), downloadReady && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDownloadPDF,\n      style: {\n        marginTop: \"1.5rem\"\n      },\n      children: \"\\u2B07\\uFE0F Download PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(OCRUpload, \"v9AvwsFCTI2B1JEHUK3eTKL8IQg=\");\n_c = OCRUpload;\nexport default OCRUpload;\nvar _c;\n$RefreshReg$(_c, \"OCRUpload\");","map":{"version":3,"names":["React","useState","axios","MetadataTable","jsxDEV","_jsxDEV","OCRUpload","_s","file","setFile","metadata","setMetadata","loading","setLoading","error","setError","downloadReady","setDownloadReady","handleFileChange","e","selected","target","files","type","handleUpload","formData","FormData","append","res","post","extracted","data","Object","keys","length","err","console","handleDownloadPDF","responseType","url","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","disabled","marginLeft","color","marginTop","_c","$RefreshReg$"],"sources":["/Users/siddharthan/Desktop/PDF-OCR/frontend/src/components/OCRUpload.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport MetadataTable from './MetadataTable';\n\nconst OCRUpload = () => {\n  const [file, setFile] = useState(null);\n  const [metadata, setMetadata] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [downloadReady, setDownloadReady] = useState(false);\n\n  const handleFileChange = (e) => {\n    const selected = e.target.files[0];\n    if (selected && selected.type === \"application/pdf\") {\n      setFile(selected);\n      setMetadata({});\n      setDownloadReady(false);\n      setError(\"\");\n    } else {\n      setError(\"Please select a valid PDF file.\");\n      setFile(null);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    setLoading(true);\n    setError(\"\");\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/ocr\", formData);\n      const extracted = res.data.metadata || {};\n      delete extracted[\"__validations__\"]; // optional: remove before render\n      setMetadata(extracted);\n      setDownloadReady(Object.keys(extracted).length > 0);\n    } catch (err) {\n      setError(\"OCR failed. Please check the backend logs.\");\n      console.error(\"OCR failed\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      const res = await axios.post(\n        \"http://localhost:5000/api/export-pdf\",\n        { metadata },\n        { responseType: \"blob\" }\n      );\n      const url = URL.createObjectURL(new Blob([res.data]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", \"metadata_output.pdf\");\n      document.body.appendChild(link);\n      link.click();\n    } catch (err) {\n      setError(\"Failed to download PDF.\");\n    }\n  };\n\n  return (\n    <div style={{ padding: \"2rem\", fontFamily: \"Arial, sans-serif\" }}>\n      <h2>üìÑ PDF OCR Extraction Tool</h2>\n      <input type=\"file\" accept=\".pdf\" onChange={handleFileChange} />\n      <button onClick={handleUpload} disabled={!file || loading} style={{ marginLeft: \"1rem\" }}>\n        {loading ? \"Processing...\" : \"Upload\"}\n      </button>\n\n      {error && <p style={{ color: \"red\", marginTop: \"1rem\" }}>{error}</p>}\n\n      {!loading && Object.keys(metadata).length > 0 && (\n        <MetadataTable metadata={metadata} />\n      )}\n\n      {downloadReady && (\n        <button onClick={handleDownloadPDF} style={{ marginTop: \"1.5rem\" }}>\n          ‚¨áÔ∏è Download PDF\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default OCRUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}