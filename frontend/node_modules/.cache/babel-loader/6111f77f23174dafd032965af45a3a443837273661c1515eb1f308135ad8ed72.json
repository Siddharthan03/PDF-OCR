{"ast":null,"code":"var _jsxFileName = \"/Users/siddharthan/Desktop/GetMax/PDF-OCR/frontend/src/components/OCRUpload.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OCRUpload = ({\n  auth,\n  setAuth\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [files, setFiles] = useState([]);\n  const [allMetadata, setAllMetadata] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [downloadReady, setDownloadReady] = useState(false);\n\n  // ✅ Create axios instance with interceptor\n  const api = axios.create({\n    baseURL: 'http://127.0.0.1:5000'\n  });\n  api.interceptors.request.use(config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  });\n\n  // ✅ Session check\n  useEffect(() => {\n    const checkSession = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          setAuth({\n            role: '',\n            loggedIn: false\n          });\n          navigate('/login');\n          return;\n        }\n        await api.get('/api/check-session');\n      } catch (err) {\n        console.error('Session expired or access denied');\n        setAuth({\n          role: '',\n          loggedIn: false\n        });\n        navigate('/login');\n      }\n    };\n    checkSession();\n  }, [setAuth, navigate]);\n  const handleFileChange = e => {\n    setFiles([...e.target.files]);\n  };\n  const handleUploadAll = async () => {\n    if (files.length === 0) return;\n    setLoading(true);\n    let all = [];\n    try {\n      // ✅ reset backend Excel storage\n      await api.post('/api/reset');\n      for (const file of files) {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        // ✅ FIX: no manual headers, axios detects FormData automatically\n        const res = await api.post('/api/ocr', formData);\n        const meta = res.data.metadata || {};\n        meta['File Name'] = meta['File Name'] || file.name;\n        meta['Patient Signature'] = res.data.patient_signature;\n        meta['Physician Signature'] = res.data.physician_signature;\n        all.push(meta);\n\n        // Save metadata in backend Excel buffer\n        await api.post('/api/export-excel', {\n          metadata: meta\n        });\n      }\n      setAllMetadata(all);\n      setDownloadReady(true);\n    } catch (err) {\n      console.error('Upload error:', err);\n      alert('Upload failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDownload = async () => {\n    try {\n      const res = await api.get('/api/export-excel', {\n        responseType: 'blob'\n      });\n      const url = window.URL.createObjectURL(new Blob([res.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'metadata.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n    } catch (err) {\n      console.error('Download error:', err);\n      alert('Failed to download Excel.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ocr-upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"OCR Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUploadAll,\n      disabled: loading,\n      children: loading ? 'Processing...' : 'Upload & Process All'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), downloadReady && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDownload,\n      children: \"Download Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Extracted Metadata\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(allMetadata, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(OCRUpload, \"2/7vDUKfiUVIqZir0MpG9Sv3nQE=\", false, function () {\n  return [useNavigate];\n});\n_c = OCRUpload;\nexport default OCRUpload;\nvar _c;\n$RefreshReg$(_c, \"OCRUpload\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","OCRUpload","auth","setAuth","_s","navigate","files","setFiles","allMetadata","setAllMetadata","loading","setLoading","downloadReady","setDownloadReady","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","checkSession","role","loggedIn","get","err","console","error","handleFileChange","e","target","handleUploadAll","length","all","post","file","formData","FormData","append","res","meta","data","metadata","name","patient_signature","physician_signature","push","alert","handleDownload","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","multiple","onChange","onClick","disabled","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/siddharthan/Desktop/GetMax/PDF-OCR/frontend/src/components/OCRUpload.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '../App.css';\n\nconst OCRUpload = ({ auth, setAuth }) => {\n  const navigate = useNavigate();\n  const [files, setFiles] = useState([]);\n  const [allMetadata, setAllMetadata] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [downloadReady, setDownloadReady] = useState(false);\n\n  // ✅ Create axios instance with interceptor\n  const api = axios.create({\n    baseURL: 'http://127.0.0.1:5000',\n  });\n\n  api.interceptors.request.use((config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  });\n\n  // ✅ Session check\n  useEffect(() => {\n    const checkSession = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          setAuth({ role: '', loggedIn: false });\n          navigate('/login');\n          return;\n        }\n        await api.get('/api/check-session');\n      } catch (err) {\n        console.error('Session expired or access denied');\n        setAuth({ role: '', loggedIn: false });\n        navigate('/login');\n      }\n    };\n    checkSession();\n  }, [setAuth, navigate]);\n\n  const handleFileChange = (e) => {\n    setFiles([...e.target.files]);\n  };\n\n  const handleUploadAll = async () => {\n    if (files.length === 0) return;\n\n    setLoading(true);\n    let all = [];\n\n    try {\n      // ✅ reset backend Excel storage\n      await api.post('/api/reset');\n\n      for (const file of files) {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        // ✅ FIX: no manual headers, axios detects FormData automatically\n        const res = await api.post('/api/ocr', formData);\n\n        const meta = res.data.metadata || {};\n        meta['File Name'] = meta['File Name'] || file.name;\n        meta['Patient Signature'] = res.data.patient_signature;\n        meta['Physician Signature'] = res.data.physician_signature;\n\n        all.push(meta);\n\n        // Save metadata in backend Excel buffer\n        await api.post('/api/export-excel', { metadata: meta });\n      }\n\n      setAllMetadata(all);\n      setDownloadReady(true);\n    } catch (err) {\n      console.error('Upload error:', err);\n      alert('Upload failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDownload = async () => {\n    try {\n      const res = await api.get('/api/export-excel', { responseType: 'blob' });\n\n      const url = window.URL.createObjectURL(new Blob([res.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'metadata.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n    } catch (err) {\n      console.error('Download error:', err);\n      alert('Failed to download Excel.');\n    }\n  };\n\n  return (\n    <div className=\"ocr-upload\">\n      <h2>OCR Upload</h2>\n\n      <input type=\"file\" multiple onChange={handleFileChange} />\n      <button onClick={handleUploadAll} disabled={loading}>\n        {loading ? 'Processing...' : 'Upload & Process All'}\n      </button>\n\n      {downloadReady && (\n        <button onClick={handleDownload}>Download Excel</button>\n      )}\n\n      <div>\n        <h3>Extracted Metadata</h3>\n        <pre>{JSON.stringify(allMetadata, null, 2)}</pre>\n      </div>\n    </div>\n  );\n};\n\nexport default OCRUpload;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACA,MAAMmB,GAAG,GAAGjB,KAAK,CAACkB,MAAM,CAAC;IACvBC,OAAO,EAAE;EACX,CAAC,CAAC;EAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;IACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;IACrD;IACA,OAAOD,MAAM;EACf,CAAC,CAAC;;EAEF;EACAxB,SAAS,CAAC,MAAM;IACd,MAAM6B,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMJ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAI,CAACF,KAAK,EAAE;UACVlB,OAAO,CAAC;YAAEuB,IAAI,EAAE,EAAE;YAAEC,QAAQ,EAAE;UAAM,CAAC,CAAC;UACtCtB,QAAQ,CAAC,QAAQ,CAAC;UAClB;QACF;QACA,MAAMS,GAAG,CAACc,GAAG,CAAC,oBAAoB,CAAC;MACrC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;QACjD5B,OAAO,CAAC;UAAEuB,IAAI,EAAE,EAAE;UAAEC,QAAQ,EAAE;QAAM,CAAC,CAAC;QACtCtB,QAAQ,CAAC,QAAQ,CAAC;MACpB;IACF,CAAC;IACDoB,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACtB,OAAO,EAAEE,QAAQ,CAAC,CAAC;EAEvB,MAAM2B,gBAAgB,GAAIC,CAAC,IAAK;IAC9B1B,QAAQ,CAAC,CAAC,GAAG0B,CAAC,CAACC,MAAM,CAAC5B,KAAK,CAAC,CAAC;EAC/B,CAAC;EAED,MAAM6B,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI7B,KAAK,CAAC8B,MAAM,KAAK,CAAC,EAAE;IAExBzB,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI0B,GAAG,GAAG,EAAE;IAEZ,IAAI;MACF;MACA,MAAMvB,GAAG,CAACwB,IAAI,CAAC,YAAY,CAAC;MAE5B,KAAK,MAAMC,IAAI,IAAIjC,KAAK,EAAE;QACxB,MAAMkC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;;QAE7B;QACA,MAAMI,GAAG,GAAG,MAAM7B,GAAG,CAACwB,IAAI,CAAC,UAAU,EAAEE,QAAQ,CAAC;QAEhD,MAAMI,IAAI,GAAGD,GAAG,CAACE,IAAI,CAACC,QAAQ,IAAI,CAAC,CAAC;QACpCF,IAAI,CAAC,WAAW,CAAC,GAAGA,IAAI,CAAC,WAAW,CAAC,IAAIL,IAAI,CAACQ,IAAI;QAClDH,IAAI,CAAC,mBAAmB,CAAC,GAAGD,GAAG,CAACE,IAAI,CAACG,iBAAiB;QACtDJ,IAAI,CAAC,qBAAqB,CAAC,GAAGD,GAAG,CAACE,IAAI,CAACI,mBAAmB;QAE1DZ,GAAG,CAACa,IAAI,CAACN,IAAI,CAAC;;QAEd;QACA,MAAM9B,GAAG,CAACwB,IAAI,CAAC,mBAAmB,EAAE;UAAEQ,QAAQ,EAAEF;QAAK,CAAC,CAAC;MACzD;MAEAnC,cAAc,CAAC4B,GAAG,CAAC;MACnBxB,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEF,GAAG,CAAC;MACnCsB,KAAK,CAAC,kCAAkC,CAAC;IAC3C,CAAC,SAAS;MACRxC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMyC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMT,GAAG,GAAG,MAAM7B,GAAG,CAACc,GAAG,CAAC,mBAAmB,EAAE;QAAEyB,YAAY,EAAE;MAAO,CAAC,CAAC;MAExE,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACf,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC;MAC5D,MAAMc,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGR,GAAG;MACfK,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,eAAe,CAAC;MAC9CH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;MAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;MACZP,IAAI,CAACQ,MAAM,CAAC,CAAC;IACf,CAAC,CAAC,OAAOtC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEF,GAAG,CAAC;MACrCsB,KAAK,CAAC,2BAA2B,CAAC;IACpC;EACF,CAAC;EAED,oBACEnD,OAAA;IAAKoE,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzBrE,OAAA;MAAAqE,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEnBzE,OAAA;MAAO0E,IAAI,EAAC,MAAM;MAACC,QAAQ;MAACC,QAAQ,EAAE5C;IAAiB;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1DzE,OAAA;MAAQ6E,OAAO,EAAE1C,eAAgB;MAAC2C,QAAQ,EAAEpE,OAAQ;MAAA2D,QAAA,EACjD3D,OAAO,GAAG,eAAe,GAAG;IAAsB;MAAA4D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,EAER7D,aAAa,iBACZZ,OAAA;MAAQ6E,OAAO,EAAEzB,cAAe;MAAAiB,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACxD,eAEDzE,OAAA;MAAAqE,QAAA,gBACErE,OAAA;QAAAqE,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BzE,OAAA;QAAAqE,QAAA,EAAMU,IAAI,CAACC,SAAS,CAACxE,WAAW,EAAE,IAAI,EAAE,CAAC;MAAC;QAAA8D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACrE,EAAA,CAtHIH,SAAS;EAAA,QACIH,WAAW;AAAA;AAAAmF,EAAA,GADxBhF,SAAS;AAwHf,eAAeA,SAAS;AAAC,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}